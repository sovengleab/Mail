/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Mail;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.InputStream;
import java.util.Properties;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.mail.Flags;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.mail.internet.MimeUtility;
import javax.mail.search.FlagTerm;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.Timer;

/**
 *
 * @author setec
 */
public class DownloadMail extends javax.swing.JFrame {
    
    /**
     * Creates new form DownloadMail
     */
    
    Timer timer;
    int counter = 0;
    public DownloadMail() {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/img/Email-Download-icon.png")).getImage());
        timer = new Timer(1000, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
                lbtime.setText(""+counter);
                counter++;
                
            }
        });
        timer.start();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fdrChooser = new javax.swing.JFileChooser();
        btnDownload = new javax.swing.JButton();
        txtUserName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        comboServer = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        chkUnseen = new javax.swing.JCheckBox();
        btnSaveTo = new javax.swing.JButton();
        txtDirectories = new javax.swing.JTextField();
        lbtime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Download Email");
        setIconImage(new ImageIcon(getClass().getResource("/img/Email-Download-icon.png")).getImage());

        btnDownload.setText("Download");
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });

        txtUserName.setText("vengleab.so");

        jLabel1.setForeground(new java.awt.Color(0, 153, 51));
        jLabel1.setText("User Name");

        jLabel2.setText("Password");

        txtPassword.setText("client123");

        comboServer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gmail", "Seatelgruop" }));
        comboServer.setSelectedIndex(1);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Mail Attachment Download");
        jLabel3.setToolTipText("");

        chkUnseen.setSelected(true);
        chkUnseen.setText("Unseen Only");
        chkUnseen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUnseenActionPerformed(evt);
            }
        });

        btnSaveTo.setText("Save to");
        btnSaveTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveToActionPerformed(evt);
            }
        });

        txtDirectories.setEditable(false);
        txtDirectories.setText("C:\\temp");

        lbtime.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chkUnseen)
                                .addGap(18, 18, 18)
                                .addComponent(comboServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtUserName)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(txtDirectories)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveTo)))
                .addContainerGap(47, Short.MAX_VALUE))
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lbtime, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboServer, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkUnseen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveTo)
                    .addComponent(txtDirectories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lbtime, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void download(String user,String pass,boolean unseen,String server,String dir) throws Exception{
       // Properties properties=new Properties();
        System.setProperty("mail.mime.ignoreunknownencoding" ,"true");
        System.setProperty("mail.imaps.connectionpoolsize", "1");
        System.setProperty("mail.imaps.partialfetch", "false");
        Properties pros=System.getProperties();
        Session session = Session.getDefaultInstance(pros);
        Store store = session.getStore("imaps");
        store.connect(server, 993, user, pass);
        Folder inbox = store.getFolder("INBOX");
        inbox.open(Folder.READ_ONLY);
        Message[] messages;
        // Fetch unseen messages from inbox folder
        if (unseen) {
            messages = inbox.search(new FlagTerm(new Flags(Flags.Flag.SEEN), false));
        } else {
            messages = inbox.getMessages();
        }
        System.out.print(messages.length);

        for (Message message : messages) {
            String contentType = message.getContentType();
            MimeMessage m=(MimeMessage)message;
            if(message.isMimeType("multipart/mixed")){
                System.out.println("sendDate: " + message.getSentDate()+ " subject:" + message.getSubject());
                MimeMultipart multiPart = (MimeMultipart) message.getContent();
                int count = multiPart.getCount();
                for (int i = 0; i < count; i++) {
                    MimeBodyPart part = (MimeBodyPart) multiPart.getBodyPart(i);
                    if (part.ATTACHMENT.equalsIgnoreCase(part.getDisposition())) {
                        String fileName = MimeUtility.decodeText(part.getFileName());
                        dir=dir.replaceAll("\\\\","/");
                        part.saveFile(dir+ File.separator +  fileName);
                    }
                }
            }
        }
        System.out.print("Finished");
        timer.stop();
        lbtime.setText(String.valueOf(counter));
    }
    
     private  void download(){
       if (MyInput.check(txtUserName, txtPassword)) {
            boolean unseen = chkUnseen.isSelected();
            String user = txtUserName.getText();
            String pass = String.valueOf(txtPassword.getPassword());
            int serverN = comboServer.getSelectedIndex();
            String server;
            if (serverN == 0) {
                server = "imap.googlemail.com";
                user += "@gmail.com";
            } else {
                server = "mail.seatelgroup.com";
                user += "@seatelgroup.com";
                System.out.print(pass);
            }
            String dir = txtDirectories.getText();
            try {
                download(user, pass, unseen, server, dir);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } 
    }
    
    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
        download();  
    }//GEN-LAST:event_btnDownloadActionPerformed

    private void chkUnseenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUnseenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkUnseenActionPerformed

    private void btnSaveToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveToActionPerformed
        fdrChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
        int response=fdrChooser.showOpenDialog(txtDirectories);
        if(response==JFileChooser.APPROVE_OPTION){
            txtDirectories.setText(fdrChooser.getSelectedFile().toString());
        }
        //btnDownloadActionPerformed(null);
    }//GEN-LAST:event_btnSaveToActionPerformed

    /**
     * @param args the command line arguments
     */
   // static DownloadMail getmail = new DownloadMail();
    static DownloadMail getmail;
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DownloadMail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DownloadMail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DownloadMail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DownloadMail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>        
        getmail = new DownloadMail();
        /* Create and display the form */
        Runnable runnable = new Runnable() {

            public void run() {
                getmail.setVisible(true);
                getmail.download();
            }
        };
        ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
        service.scheduleWithFixedDelay(runnable, 0, 600, TimeUnit.SECONDS);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton btnDownload;
    private javax.swing.JButton btnSaveTo;
    private javax.swing.JCheckBox chkUnseen;
    private javax.swing.JComboBox comboServer;
    private javax.swing.JFileChooser fdrChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lbtime;
    private javax.swing.JTextField txtDirectories;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
}
